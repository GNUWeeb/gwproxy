
ifndef OPTIMIZE
	OPTIMIZE = -O2
endif
INCLUDE_FLAGS = -I./src/
CFLAGS = -Wall -Wextra -ggdb3 $(OPTIMIZE) -fno-stack-protector -fpic -fPIC $(INCLUDE_FLAGS)
LDFLAGS = -ggdb3 $(OPTIMIZE)
LIBS = -lpthread
DEPFLAGS = -MMD -MP -MF $@.d
LDFLAGS_SHARED = $(LDFLAGS) -shared -fpic -fPIC
GWPROXY_DIR = ./src/gwproxy

ifeq ($(SANITIZE),1)
	CFLAGS += -fsanitize=address -fsanitize=undefined
	LDFLAGS += -fsanitize=address -fsanitize=undefined
endif

ifeq ($(DEBUG),1)
	CFLAGS += -DDEBUG
else
	CFLAGS += -DNDEBUG
endif

ifeq ($(LTO),1)
	CFLAGS += -flto
	LDFLAGS += -flto
endif

ifeq ($(STATIC),1)
	LDFLAGS += -static
endif

GWPROXY_TARGET = gwproxy
GWPROXY_CC_SOURCES = \
	$(GWPROXY_DIR)/gwproxy.c \
	$(GWPROXY_DIR)/log.c \
	$(GWPROXY_DIR)/ev/epoll.c


ifeq ($(CONFIG_IO_URING),1)
	CFLAGS += -DCONFIG_IO_URING
	LIBS += /usr/lib/liburing.a
	GWPROXY_CC_SOURCES += $(GWPROXY_DIR)/ev/io_uring.c
endif

GWPROXY_OBJECTS = $(GWPROXY_CC_SOURCES:%.c=%.c.o)

LIBGWPSOCKS5_TARGET = libgwpsocks5.so
LIBGWPSOCKS5_CC_SOURCES = $(GWPROXY_DIR)/socks5.c
LIBGWPSOCKS5_OBJECTS = $(LIBGWPSOCKS5_CC_SOURCES:%.c=%.c.o)
LIBGWPSOCKS5_TEST_TARGET = $(GWPROXY_DIR)/tests/socks5.t
LIBGWPSOCKS5_TEST_CC_SOURCES = $(GWPROXY_DIR)/tests/socks5.c
LIBGWPSOCKS5_TEST_OBJECTS = $(LIBGWPSOCKS5_TEST_CC_SOURCES:%.c=%.c.o)

LIBGWDNS_TARGET = libgwdns.so
LIBGWDNS_CC_SOURCES = $(GWPROXY_DIR)/dns.c $(GWPROXY_DIR)/dns_cache.c
LIBGWDNS_OBJECTS = $(LIBGWDNS_CC_SOURCES:%.c=%.c.o)
LIBGWDNS_TEST_TARGET = $(GWPROXY_DIR)/tests/dns.t
LIBGWDNS_TEST_CC_SOURCES = $(GWPROXY_DIR)/tests/dns.c
LIBGWDNS_TEST_OBJECTS = $(LIBGWDNS_TEST_CC_SOURCES:%.c=%.c.o)

ALL_TEST_TARGETS = $(LIBGWDNS_TEST_TARGET) $(LIBGWPSOCKS5_TEST_TARGET)
ALL_OBJECTS = $(GWPROXY_OBJECTS) $(LIBGWPSOCKS5_OBJECTS) $(LIBGWDNS_OBJECTS) $(LIBGWDNS_TEST_OBJECTS) $(LIBGWPSOCKS5_TEST_OBJECTS)
ALL_TARGETS = $(GWPROXY_TARGET) $(LIBGWPSOCKS5_TARGET) $(LIBGWDNS_TARGET) $(ALL_TEST_TARGETS)
ALL_DEPFILES = $(ALL_OBJECTS:.o=.o.d)

ALL_GWPROXY_OBJECTS = $(GWPROXY_OBJECTS) $(LIBGWPSOCKS5_OBJECTS) $(LIBGWDNS_OBJECTS)

all: $(GWPROXY_TARGET) $(LIBGWPSOCKS5_TARGET) $(LIBGWDNS_TARGET)

$(GWPROXY_TARGET): $(ALL_GWPROXY_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)

$(LIBGWPSOCKS5_TARGET): $(LIBGWPSOCKS5_OBJECTS)
	$(CC) $(LDFLAGS_SHARED) -o $@ $^ $(LIBS)

$(LIBGWPSOCKS5_TEST_TARGET): $(LIBGWPSOCKS5_TEST_OBJECTS) $(LIBGWPSOCKS5_TARGET)
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)

$(LIBGWDNS_TARGET): $(LIBGWDNS_OBJECTS)
	$(CC) $(LDFLAGS_SHARED) -o $@ $^ $(LIBS)

$(LIBGWDNS_TEST_TARGET): $(LIBGWDNS_TEST_OBJECTS) $(LIBGWDNS_TARGET)
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)

%.c.o: %.c
	$(CC) $(CFLAGS) $(DEPFLAGS) -c $< -o $@

-include $(ALL_DEPFILES)

TO_BE_REMOVED = $(ALL_OBJECTS) $(ALL_TARGETS) $(ALL_DEPFILES)

clean:
	rm -f $(TO_BE_REMOVED)

IE=LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(shell pwd)
test: $(LIBGWDNS_TEST_TARGET) $(LIBGWPSOCKS5_TEST_TARGET)
	@echo "Running tests...";
	@echo "Testing libgwdns...";
	@$(IE) ./$(LIBGWDNS_TEST_TARGET);
	@echo "Testing libgwpsocks5...";
	@$(IE) ./$(LIBGWPSOCKS5_TEST_TARGET);
	@echo "Tests completed successfully.";

.PHONY: all clean test
